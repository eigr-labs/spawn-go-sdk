// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.12.4
// source: eigr/functions/protocol/actors/actor.proto

package actors

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type that defines the runtime characteristics of the Actor.
// Regardless of the type of actor it is important that
// all actors are registered during the proxy and host initialization phase.
type Kind int32

const (
	// When no type is informed, the default to be assumed will be the Named
	// pattern.
	Kind_UNKNOW_KIND Kind = 0
	// NAMED actors as the name suggests have only one real instance of themselves
	// running during their entire lifecycle. That is, they are the opposite of
	// the UNNAMED type Actors.
	Kind_NAMED Kind = 1
	// UNNAMED actors are used to create children of this based actor at runtime
	Kind_UNNAMED Kind = 2
	// Pooled Actors are similar to Unnamed actors, but unlike them,
	// their identifying name will always be the one registered at the system
	// initialization stage. The great advantage of Pooled actors is that they
	// have multiple instances of themselves acting as a request service pool.
	// Pooled actors are also stateless actors, that is, they will not have their
	// in-memory state persisted via Statesstore. This is done to avoid problems
	// with the correctness of the stored state.
	// Pooled Actors are generally used for tasks where the Actor Model would
	// perform worse than other concurrency models and for tasks that do not
	// require state concerns. Integration flows, data caching, proxies are good
	// examples of use cases for this type of Actor.
	Kind_POOLED Kind = 3
	// Reserved for future use
	Kind_PROXY Kind = 4
	Kind_TASK  Kind = 5
	// Projection actors are used to project data from different actor streams.
	Kind_PROJECTION Kind = 6
)

// Enum value maps for Kind.
var (
	Kind_name = map[int32]string{
		0: "UNKNOW_KIND",
		1: "NAMED",
		2: "UNNAMED",
		3: "POOLED",
		4: "PROXY",
		5: "TASK",
		6: "PROJECTION",
	}
	Kind_value = map[string]int32{
		"UNKNOW_KIND": 0,
		"NAMED":       1,
		"UNNAMED":     2,
		"POOLED":      3,
		"PROXY":       4,
		"TASK":        5,
		"PROJECTION":  6,
	}
)

func (x Kind) Enum() *Kind {
	p := new(Kind)
	*p = x
	return p
}

func (x Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_eigr_functions_protocol_actors_actor_proto_enumTypes[0].Descriptor()
}

func (Kind) Type() protoreflect.EnumType {
	return &file_eigr_functions_protocol_actors_actor_proto_enumTypes[0]
}

func (x Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Kind.Descriptor instead.
func (Kind) EnumDescriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{0}
}

type Registry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actors map[string]*Actor `protobuf:"bytes,1,rep,name=actors,proto3" json:"actors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Registry) Reset() {
	*x = Registry{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Registry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registry) ProtoMessage() {}

func (x *Registry) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registry.ProtoReflect.Descriptor instead.
func (*Registry) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{0}
}

func (x *Registry) GetActors() map[string]*Actor {
	if x != nil {
		return x.Actors
	}
	return nil
}

type ActorSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Registry *Registry `protobuf:"bytes,2,opt,name=registry,proto3" json:"registry,omitempty"`
}

func (x *ActorSystem) Reset() {
	*x = ActorSystem{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActorSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorSystem) ProtoMessage() {}

func (x *ActorSystem) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorSystem.ProtoReflect.Descriptor instead.
func (*ActorSystem) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{1}
}

func (x *ActorSystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActorSystem) GetRegistry() *Registry {
	if x != nil {
		return x.Registry
	}
	return nil
}

// A strategy for save state.
type ActorSnapshotStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Strategy:
	//
	//	*ActorSnapshotStrategy_Timeout
	Strategy isActorSnapshotStrategy_Strategy `protobuf_oneof:"strategy"`
}

func (x *ActorSnapshotStrategy) Reset() {
	*x = ActorSnapshotStrategy{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActorSnapshotStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorSnapshotStrategy) ProtoMessage() {}

func (x *ActorSnapshotStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorSnapshotStrategy.ProtoReflect.Descriptor instead.
func (*ActorSnapshotStrategy) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{2}
}

func (m *ActorSnapshotStrategy) GetStrategy() isActorSnapshotStrategy_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (x *ActorSnapshotStrategy) GetTimeout() *TimeoutStrategy {
	if x, ok := x.GetStrategy().(*ActorSnapshotStrategy_Timeout); ok {
		return x.Timeout
	}
	return nil
}

type isActorSnapshotStrategy_Strategy interface {
	isActorSnapshotStrategy_Strategy()
}

type ActorSnapshotStrategy_Timeout struct {
	// the timeout strategy.
	Timeout *TimeoutStrategy `protobuf:"bytes,1,opt,name=timeout,proto3,oneof"`
}

func (*ActorSnapshotStrategy_Timeout) isActorSnapshotStrategy_Strategy() {}

// A strategy which a user function's entity is passivated.
type ActorDeactivationStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Strategy:
	//
	//	*ActorDeactivationStrategy_Timeout
	Strategy isActorDeactivationStrategy_Strategy `protobuf_oneof:"strategy"`
}

func (x *ActorDeactivationStrategy) Reset() {
	*x = ActorDeactivationStrategy{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActorDeactivationStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorDeactivationStrategy) ProtoMessage() {}

func (x *ActorDeactivationStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorDeactivationStrategy.ProtoReflect.Descriptor instead.
func (*ActorDeactivationStrategy) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{3}
}

func (m *ActorDeactivationStrategy) GetStrategy() isActorDeactivationStrategy_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (x *ActorDeactivationStrategy) GetTimeout() *TimeoutStrategy {
	if x, ok := x.GetStrategy().(*ActorDeactivationStrategy_Timeout); ok {
		return x.Timeout
	}
	return nil
}

type isActorDeactivationStrategy_Strategy interface {
	isActorDeactivationStrategy_Strategy()
}

type ActorDeactivationStrategy_Timeout struct {
	// the timeout strategy.
	Timeout *TimeoutStrategy `protobuf:"bytes,1,opt,name=timeout,proto3,oneof"`
}

func (*ActorDeactivationStrategy_Timeout) isActorDeactivationStrategy_Strategy() {}

// A strategy based on a timeout.
type TimeoutStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timeout in millis
	Timeout int64 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *TimeoutStrategy) Reset() {
	*x = TimeoutStrategy{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeoutStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeoutStrategy) ProtoMessage() {}

func (x *TimeoutStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeoutStrategy.ProtoReflect.Descriptor instead.
func (*TimeoutStrategy) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{4}
}

func (x *TimeoutStrategy) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// A action represents an action that the user can perform on an Actor.
// Actions in supporting languages are represented by functions or methods.
// An Actor action has nothing to do with the semantics of Actions in a
// CQRS/EventSourced system. It just represents an action that supporting
// languages can invoke.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the function or method in the supporting language that has been
	// registered in Ator.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{5}
}

func (x *Action) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A FixedTimerAction is similar to a regular Action, its main differences are
// that it is scheduled to run at regular intervals and only takes the actor's
// state as an argument. Timer Actions are good for executing loops that
// manipulate the actor's own state. In Elixir or other languages in BEAM it
// would be similar to invoking Process.send_after(self(), atom, msg, timeout)
type FixedTimerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time to wait until the action is triggered
	Seconds int32 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// See Action description Above
	Action *Action `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *FixedTimerAction) Reset() {
	*x = FixedTimerAction{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedTimerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedTimerAction) ProtoMessage() {}

func (x *FixedTimerAction) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedTimerAction.ProtoReflect.Descriptor instead.
func (*FixedTimerAction) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{6}
}

func (x *FixedTimerAction) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *FixedTimerAction) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

type ActorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags  map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State *anypb.Any        `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ActorState) Reset() {
	*x = ActorState{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorState) ProtoMessage() {}

func (x *ActorState) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorState.ProtoReflect.Descriptor instead.
func (*ActorState) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{7}
}

func (x *ActorState) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ActorState) GetState() *anypb.Any {
	if x != nil {
		return x.State
	}
	return nil
}

// Metadata represents a set of key-value pairs that can be used to
// provide additional information about an Actor.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A channel group represents a way to send actions to various actors
	// that belong to a certain semantic group. Following the Pub-Sub pattern.
	ChannelGroup []*Channel        `protobuf:"bytes,1,rep,name=channel_group,json=channelGroup,proto3" json:"channel_group,omitempty"`
	Tags         map[string]string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{8}
}

func (x *Metadata) GetChannelGroup() []*Channel {
	if x != nil {
		return x.ChannelGroup
	}
	return nil
}

func (x *Metadata) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Represents a Pub-Sub binding, where a actor can be subscribed to a channel
// and map a specific action to a specific topic if necessary
// if the action is not informed, the default action will be "receive".
type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic  string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{9}
}

func (x *Channel) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Channel) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type ProjectionSubject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actor     string                 `protobuf:"bytes,1,opt,name=actor,proto3" json:"actor,omitempty"`
	Action    string                 `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *ProjectionSubject) Reset() {
	*x = ProjectionSubject{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectionSubject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionSubject) ProtoMessage() {}

func (x *ProjectionSubject) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionSubject.ProtoReflect.Descriptor instead.
func (*ProjectionSubject) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{10}
}

func (x *ProjectionSubject) GetActor() string {
	if x != nil {
		return x.Actor
	}
	return ""
}

func (x *ProjectionSubject) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ProjectionSubject) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type EventsRetentionTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *EventsRetentionTime) Reset() {
	*x = EventsRetentionTime{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsRetentionTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsRetentionTime) ProtoMessage() {}

func (x *EventsRetentionTime) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsRetentionTime.ProtoReflect.Descriptor instead.
func (*EventsRetentionTime) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{11}
}

func (x *EventsRetentionTime) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type EventsRetentionStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Strategy:
	//
	//	*EventsRetentionStrategy_TimeInMs
	//	*EventsRetentionStrategy_Infinite
	Strategy isEventsRetentionStrategy_Strategy `protobuf_oneof:"strategy"`
}

func (x *EventsRetentionStrategy) Reset() {
	*x = EventsRetentionStrategy{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventsRetentionStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsRetentionStrategy) ProtoMessage() {}

func (x *EventsRetentionStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsRetentionStrategy.ProtoReflect.Descriptor instead.
func (*EventsRetentionStrategy) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{12}
}

func (m *EventsRetentionStrategy) GetStrategy() isEventsRetentionStrategy_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (x *EventsRetentionStrategy) GetTimeInMs() *EventsRetentionTime {
	if x, ok := x.GetStrategy().(*EventsRetentionStrategy_TimeInMs); ok {
		return x.TimeInMs
	}
	return nil
}

func (x *EventsRetentionStrategy) GetInfinite() bool {
	if x, ok := x.GetStrategy().(*EventsRetentionStrategy_Infinite); ok {
		return x.Infinite
	}
	return false
}

type isEventsRetentionStrategy_Strategy interface {
	isEventsRetentionStrategy_Strategy()
}

type EventsRetentionStrategy_TimeInMs struct {
	TimeInMs *EventsRetentionTime `protobuf:"bytes,1,opt,name=time_in_ms,json=timeInMs,proto3,oneof"`
}

type EventsRetentionStrategy_Infinite struct {
	Infinite bool `protobuf:"varint,2,opt,name=infinite,proto3,oneof"`
}

func (*EventsRetentionStrategy_TimeInMs) isEventsRetentionStrategy_Strategy() {}

func (*EventsRetentionStrategy_Infinite) isEventsRetentionStrategy_Strategy() {}

type ProjectionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Define this for projections that need to listen to events
	Subjects []*ProjectionSubject `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
	// Define this for actors that can emit events
	Sourceable bool `protobuf:"varint,2,opt,name=sourceable,proto3" json:"sourceable,omitempty"`
	// The strategy for event store retention
	EventsRetentionStrategy *EventsRetentionStrategy `protobuf:"bytes,3,opt,name=events_retention_strategy,json=eventsRetentionStrategy,proto3" json:"events_retention_strategy,omitempty"`
	// Define how we consume events from subjects
	StrictEventsOrdering bool `protobuf:"varint,4,opt,name=strict_events_ordering,json=strictEventsOrdering,proto3" json:"strict_events_ordering,omitempty"`
}

func (x *ProjectionSettings) Reset() {
	*x = ProjectionSettings{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectionSettings) ProtoMessage() {}

func (x *ProjectionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectionSettings.ProtoReflect.Descriptor instead.
func (*ProjectionSettings) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{13}
}

func (x *ProjectionSettings) GetSubjects() []*ProjectionSubject {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *ProjectionSettings) GetSourceable() bool {
	if x != nil {
		return x.Sourceable
	}
	return false
}

func (x *ProjectionSettings) GetEventsRetentionStrategy() *EventsRetentionStrategy {
	if x != nil {
		return x.EventsRetentionStrategy
	}
	return nil
}

func (x *ProjectionSettings) GetStrictEventsOrdering() bool {
	if x != nil {
		return x.StrictEventsOrdering
	}
	return false
}

type ActorSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the type of Actor to be configured.
	Kind Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=eigr.functions.protocol.actors.Kind" json:"kind,omitempty"`
	// Indicates whether an actor's state should be persisted in a definitive
	// store.
	Stateful bool `protobuf:"varint,2,opt,name=stateful,proto3" json:"stateful,omitempty"`
	// Snapshot strategy
	SnapshotStrategy *ActorSnapshotStrategy `protobuf:"bytes,3,opt,name=snapshot_strategy,json=snapshotStrategy,proto3" json:"snapshot_strategy,omitempty"`
	// Deactivate strategy
	DeactivationStrategy *ActorDeactivationStrategy `protobuf:"bytes,4,opt,name=deactivation_strategy,json=deactivationStrategy,proto3" json:"deactivation_strategy,omitempty"`
	// When kind is POOLED this is used to define minimun actor instances
	MinPoolSize int32 `protobuf:"varint,5,opt,name=min_pool_size,json=minPoolSize,proto3" json:"min_pool_size,omitempty"`
	// When kind is POOLED this is used to define maximum actor instances
	MaxPoolSize int32 `protobuf:"varint,6,opt,name=max_pool_size,json=maxPoolSize,proto3" json:"max_pool_size,omitempty"`
	// Event source settings
	ProjectionSettings *ProjectionSettings `protobuf:"bytes,7,opt,name=projection_settings,json=projectionSettings,proto3" json:"projection_settings,omitempty"`
}

func (x *ActorSettings) Reset() {
	*x = ActorSettings{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActorSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorSettings) ProtoMessage() {}

func (x *ActorSettings) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorSettings.ProtoReflect.Descriptor instead.
func (*ActorSettings) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{14}
}

func (x *ActorSettings) GetKind() Kind {
	if x != nil {
		return x.Kind
	}
	return Kind_UNKNOW_KIND
}

func (x *ActorSettings) GetStateful() bool {
	if x != nil {
		return x.Stateful
	}
	return false
}

func (x *ActorSettings) GetSnapshotStrategy() *ActorSnapshotStrategy {
	if x != nil {
		return x.SnapshotStrategy
	}
	return nil
}

func (x *ActorSettings) GetDeactivationStrategy() *ActorDeactivationStrategy {
	if x != nil {
		return x.DeactivationStrategy
	}
	return nil
}

func (x *ActorSettings) GetMinPoolSize() int32 {
	if x != nil {
		return x.MinPoolSize
	}
	return 0
}

func (x *ActorSettings) GetMaxPoolSize() int32 {
	if x != nil {
		return x.MaxPoolSize
	}
	return 0
}

func (x *ActorSettings) GetProjectionSettings() *ProjectionSettings {
	if x != nil {
		return x.ProjectionSettings
	}
	return nil
}

type ActorId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of a Actor Entity.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of a ActorSystem
	System string `protobuf:"bytes,2,opt,name=system,proto3" json:"system,omitempty"`
	// When the Actor is of the Unnamed type,
	// the name of the parent Actor must be informed here.
	Parent string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ActorId) Reset() {
	*x = ActorId{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActorId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorId) ProtoMessage() {}

func (x *ActorId) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorId.ProtoReflect.Descriptor instead.
func (*ActorId) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{15}
}

func (x *ActorId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActorId) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *ActorId) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type Actor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actor Identification
	Id *ActorId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A Actor state.
	State *ActorState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// Actor metadata
	Metadata *Metadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Actor settings.
	Settings *ActorSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	// The actions registered for an actor
	Actions []*Action `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
	// The registered timer actions for an actor.
	TimerActions []*FixedTimerAction `protobuf:"bytes,5,rep,name=timer_actions,json=timerActions,proto3" json:"timer_actions,omitempty"`
}

func (x *Actor) Reset() {
	*x = Actor{}
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Actor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Actor) ProtoMessage() {}

func (x *Actor) ProtoReflect() protoreflect.Message {
	mi := &file_eigr_functions_protocol_actors_actor_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Actor.ProtoReflect.Descriptor instead.
func (*Actor) Descriptor() ([]byte, []int) {
	return file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP(), []int{16}
}

func (x *Actor) GetId() *ActorId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Actor) GetState() *ActorState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Actor) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Actor) GetSettings() *ActorSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Actor) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Actor) GetTimerActions() []*FixedTimerAction {
	if x != nil {
		return x.TimerActions
	}
	return nil
}

var File_eigr_functions_protocol_actors_actor_proto protoreflect.FileDescriptor

var file_eigr_functions_protocol_actors_actor_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x65, 0x69, 0x67, 0x72, 0x2f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x65, 0x69,
	0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x1a, 0x60, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x69, 0x67,
	0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x22, 0x70,
	0x0a, 0x15, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x4b, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x22, 0x74, 0x0a, 0x19, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x4b, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48,
	0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x2b, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x1c, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x6c, 0x0a, 0x10, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x3e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xbb, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65,
	0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x01,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x29, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x17,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x53, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x69,
	0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x08,
	0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xae, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4d, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x73, 0x0a, 0x19,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xe6, 0x03, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x12,
	0x62, 0x0a, 0x11, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x69, 0x67,
	0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x6e, 0x0a, 0x15, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x14, 0x64,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x63, 0x0a, 0x13, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x4d, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0xac, 0x03, 0x0a, 0x05, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65,
	0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x60,
	0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x41, 0x4d, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x4f, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x52, 0x4f, 0x58, 0x59, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x05,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06,
	0x42, 0x49, 0x0a, 0x21, 0x69, 0x6f, 0x2e, 0x65, 0x69, 0x67, 0x72, 0x2e, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x5a, 0x24, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x2f, 0x65, 0x69, 0x67,
	0x72, 0x2f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_eigr_functions_protocol_actors_actor_proto_rawDescOnce sync.Once
	file_eigr_functions_protocol_actors_actor_proto_rawDescData = file_eigr_functions_protocol_actors_actor_proto_rawDesc
)

func file_eigr_functions_protocol_actors_actor_proto_rawDescGZIP() []byte {
	file_eigr_functions_protocol_actors_actor_proto_rawDescOnce.Do(func() {
		file_eigr_functions_protocol_actors_actor_proto_rawDescData = protoimpl.X.CompressGZIP(file_eigr_functions_protocol_actors_actor_proto_rawDescData)
	})
	return file_eigr_functions_protocol_actors_actor_proto_rawDescData
}

var file_eigr_functions_protocol_actors_actor_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eigr_functions_protocol_actors_actor_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_eigr_functions_protocol_actors_actor_proto_goTypes = []any{
	(Kind)(0),                         // 0: eigr.functions.protocol.actors.Kind
	(*Registry)(nil),                  // 1: eigr.functions.protocol.actors.Registry
	(*ActorSystem)(nil),               // 2: eigr.functions.protocol.actors.ActorSystem
	(*ActorSnapshotStrategy)(nil),     // 3: eigr.functions.protocol.actors.ActorSnapshotStrategy
	(*ActorDeactivationStrategy)(nil), // 4: eigr.functions.protocol.actors.ActorDeactivationStrategy
	(*TimeoutStrategy)(nil),           // 5: eigr.functions.protocol.actors.TimeoutStrategy
	(*Action)(nil),                    // 6: eigr.functions.protocol.actors.Action
	(*FixedTimerAction)(nil),          // 7: eigr.functions.protocol.actors.FixedTimerAction
	(*ActorState)(nil),                // 8: eigr.functions.protocol.actors.ActorState
	(*Metadata)(nil),                  // 9: eigr.functions.protocol.actors.Metadata
	(*Channel)(nil),                   // 10: eigr.functions.protocol.actors.Channel
	(*ProjectionSubject)(nil),         // 11: eigr.functions.protocol.actors.ProjectionSubject
	(*EventsRetentionTime)(nil),       // 12: eigr.functions.protocol.actors.EventsRetentionTime
	(*EventsRetentionStrategy)(nil),   // 13: eigr.functions.protocol.actors.EventsRetentionStrategy
	(*ProjectionSettings)(nil),        // 14: eigr.functions.protocol.actors.ProjectionSettings
	(*ActorSettings)(nil),             // 15: eigr.functions.protocol.actors.ActorSettings
	(*ActorId)(nil),                   // 16: eigr.functions.protocol.actors.ActorId
	(*Actor)(nil),                     // 17: eigr.functions.protocol.actors.Actor
	nil,                               // 18: eigr.functions.protocol.actors.Registry.ActorsEntry
	nil,                               // 19: eigr.functions.protocol.actors.ActorState.TagsEntry
	nil,                               // 20: eigr.functions.protocol.actors.Metadata.TagsEntry
	(*anypb.Any)(nil),                 // 21: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),     // 22: google.protobuf.Timestamp
}
var file_eigr_functions_protocol_actors_actor_proto_depIdxs = []int32{
	18, // 0: eigr.functions.protocol.actors.Registry.actors:type_name -> eigr.functions.protocol.actors.Registry.ActorsEntry
	1,  // 1: eigr.functions.protocol.actors.ActorSystem.registry:type_name -> eigr.functions.protocol.actors.Registry
	5,  // 2: eigr.functions.protocol.actors.ActorSnapshotStrategy.timeout:type_name -> eigr.functions.protocol.actors.TimeoutStrategy
	5,  // 3: eigr.functions.protocol.actors.ActorDeactivationStrategy.timeout:type_name -> eigr.functions.protocol.actors.TimeoutStrategy
	6,  // 4: eigr.functions.protocol.actors.FixedTimerAction.action:type_name -> eigr.functions.protocol.actors.Action
	19, // 5: eigr.functions.protocol.actors.ActorState.tags:type_name -> eigr.functions.protocol.actors.ActorState.TagsEntry
	21, // 6: eigr.functions.protocol.actors.ActorState.state:type_name -> google.protobuf.Any
	10, // 7: eigr.functions.protocol.actors.Metadata.channel_group:type_name -> eigr.functions.protocol.actors.Channel
	20, // 8: eigr.functions.protocol.actors.Metadata.tags:type_name -> eigr.functions.protocol.actors.Metadata.TagsEntry
	22, // 9: eigr.functions.protocol.actors.ProjectionSubject.start_time:type_name -> google.protobuf.Timestamp
	12, // 10: eigr.functions.protocol.actors.EventsRetentionStrategy.time_in_ms:type_name -> eigr.functions.protocol.actors.EventsRetentionTime
	11, // 11: eigr.functions.protocol.actors.ProjectionSettings.subjects:type_name -> eigr.functions.protocol.actors.ProjectionSubject
	13, // 12: eigr.functions.protocol.actors.ProjectionSettings.events_retention_strategy:type_name -> eigr.functions.protocol.actors.EventsRetentionStrategy
	0,  // 13: eigr.functions.protocol.actors.ActorSettings.kind:type_name -> eigr.functions.protocol.actors.Kind
	3,  // 14: eigr.functions.protocol.actors.ActorSettings.snapshot_strategy:type_name -> eigr.functions.protocol.actors.ActorSnapshotStrategy
	4,  // 15: eigr.functions.protocol.actors.ActorSettings.deactivation_strategy:type_name -> eigr.functions.protocol.actors.ActorDeactivationStrategy
	14, // 16: eigr.functions.protocol.actors.ActorSettings.projection_settings:type_name -> eigr.functions.protocol.actors.ProjectionSettings
	16, // 17: eigr.functions.protocol.actors.Actor.id:type_name -> eigr.functions.protocol.actors.ActorId
	8,  // 18: eigr.functions.protocol.actors.Actor.state:type_name -> eigr.functions.protocol.actors.ActorState
	9,  // 19: eigr.functions.protocol.actors.Actor.metadata:type_name -> eigr.functions.protocol.actors.Metadata
	15, // 20: eigr.functions.protocol.actors.Actor.settings:type_name -> eigr.functions.protocol.actors.ActorSettings
	6,  // 21: eigr.functions.protocol.actors.Actor.actions:type_name -> eigr.functions.protocol.actors.Action
	7,  // 22: eigr.functions.protocol.actors.Actor.timer_actions:type_name -> eigr.functions.protocol.actors.FixedTimerAction
	17, // 23: eigr.functions.protocol.actors.Registry.ActorsEntry.value:type_name -> eigr.functions.protocol.actors.Actor
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_eigr_functions_protocol_actors_actor_proto_init() }
func file_eigr_functions_protocol_actors_actor_proto_init() {
	if File_eigr_functions_protocol_actors_actor_proto != nil {
		return
	}
	file_eigr_functions_protocol_actors_actor_proto_msgTypes[2].OneofWrappers = []any{
		(*ActorSnapshotStrategy_Timeout)(nil),
	}
	file_eigr_functions_protocol_actors_actor_proto_msgTypes[3].OneofWrappers = []any{
		(*ActorDeactivationStrategy_Timeout)(nil),
	}
	file_eigr_functions_protocol_actors_actor_proto_msgTypes[12].OneofWrappers = []any{
		(*EventsRetentionStrategy_TimeInMs)(nil),
		(*EventsRetentionStrategy_Infinite)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eigr_functions_protocol_actors_actor_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eigr_functions_protocol_actors_actor_proto_goTypes,
		DependencyIndexes: file_eigr_functions_protocol_actors_actor_proto_depIdxs,
		EnumInfos:         file_eigr_functions_protocol_actors_actor_proto_enumTypes,
		MessageInfos:      file_eigr_functions_protocol_actors_actor_proto_msgTypes,
	}.Build()
	File_eigr_functions_protocol_actors_actor_proto = out.File
	file_eigr_functions_protocol_actors_actor_proto_rawDesc = nil
	file_eigr_functions_protocol_actors_actor_proto_goTypes = nil
	file_eigr_functions_protocol_actors_actor_proto_depIdxs = nil
}
